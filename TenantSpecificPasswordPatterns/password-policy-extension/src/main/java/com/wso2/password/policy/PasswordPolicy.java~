/*
*  Copyright (c) $today.year, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
package com.accenture.password.policy;

import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.wso2.carbon.identity.mgt.policy.AbstractPasswordPolicyEnforcer;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * Custom password policy extension for Accenture
 */

public class PasswordPolicy extends AbstractPasswordPolicyEnforcer {
    private static final Log log = LogFactory.getLog(AccenturePasswordPolicy.class);
    private String PASSWORD_PATTERN = ".";
    private Pattern pattern;
    private Matcher matcher;


    /**
     * Validates the password against the pattern provided
     *
     * @param args - comes as object array, contains the username and the password.
     * @return boolean
     */
    @Override
    public boolean enforce(Object... args) {

        if (args != null) {

            String password = args[0].toString();
            String userName = args[1].toString();

            log.info("updating password for user : " + userName);
            log.info("password : " + password);

            matcher = pattern.matcher(password);
            if(matcher.matches()) {
                log.info("password : " + password + " validated with the pattern");

                if (!dictionarySearch()){
                    return true;
                }else{
                    log.info("password : " + password + " is present in the dictionary" );
                    errorMessage = "password : " + password + " is present in the dictionary";
                    return false;
                }
            }else {
                log.info("password : " + password + " did not validated with the patten" );
                errorMessage = "Password pattern policy violated. Password should contain " +
                        "a digit[0-9], a lower case letter[a-z], an upper case letter[A-Z], " +
                        "one of !@#$%&* characters";
                return false;
            }

        }else {
            return true;
        }
    }

    /**
     * Load the extension while startup
     *
     * @param parameters contains values related to this extension define in the identity-mgt.properties
     */
    @Override
    public void init(Map<String, String> parameters) {

        if (parameters != null && parameters.size() > 0) {
            PASSWORD_PATTERN = parameters.get("pattern");
        }
        log.info("Applying Accenture password policy");
        pattern = Pattern.compile(PASSWORD_PATTERN);

    }



    private boolean dictionarySearch(){

        //Implement your logic to check from the vocabulary here.
        return false;
    }
}
